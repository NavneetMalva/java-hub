What is Polymorphism in Java?

Polymorphism is considered one of the important features of Object-Oriented Programming. 
Polymorphism allows us to perform a single action in different ways. 
In other words, polymorphism allows you to define one interface and have multiple implementations. 
The word “poly” means many and “morphs” means forms, So it means many forms.

##Compile-Time Polymorphism in Java [Static polymorphism, Method overloading]

It is also known as static polymorphism. 
This type of polymorphism is achieved by function overloading or operator overloading. 

Method Overloading

When there are multiple functions with the same name but different parameters then these functions are said to be overloaded. 
Functions can be overloaded by changes in the number of arguments or/and a change in the type of arguments.


##Runtime Polymorphism in Java [Dynamic Polymorphism, Method overriding]

It is also known as Dynamic Method Dispatch. 
It is a process in which a function call to the overridden method is resolved at Runtime. 
This type of polymorphism is achieved by Method Overriding. 
Method overriding, on the other hand, occurs when a derived class has a definition for one of the member functions of the base class. 
That base function is said to be overridden.


in overloading, method overloading takes care at compile time based on reference type -> Thats why compile time polymorphism
Animal monkey = new Monkey(); -> will call Animal method

In Overriding , method resolution takes care by jvm at runtime -> thats why Runtime polymorphism.
Animal monkey = new Monkey(); -> will call Monkey method

Method signature = method name + argument type

### Method Overloading Rules
Method Name: The method name must be the same.
Argument List: The number, type, or order of arguments must differ. (This is called the method signature in the context of overloading.)
Return Type: The return type can be different, but it doesn't play a role in distinguishing overloaded methods.
Access Modifiers: Access modifiers can be different.
Throws Clause: Overloaded methods can throw different exceptions or no exceptions at all.
Static and Instance Methods: Both static and instance methods can be overloaded.
Varargs: Overloading supports methods with variable-length arguments (...).


### Method Overriding Rules
Method Signature: The method must have the same name, return type, and parameter list.
- For covariant return types, the return type can be a subtype of the return type in the superclass.
- covariant return types only applicable for objects and not for primitive types.
Access Modifiers: The overriding method cannot have more restrictive access than the overridden method.
- Example: If the superclass method is protected, the overriding method cannot be private.
Exceptions: The overriding method cannot throw new or broader checked exceptions than the overridden method.
- Example: If the superclass method throws IOException, the overriding method can throw IOException or a subclass (like FileNotFoundException).
Static Methods: Static methods cannot be overridden but can be hidden. This is known as method hiding.
Final Methods: Final methods cannot be overridden.
Private Methods: Private methods cannot be overridden because they are not visible to the subclass.
Instance vs. Static Context: An instance method cannot override a static method, and vice versa.


Key Differences Between Overloading and Overriding
Feature	        Overloading	        Overriding
Method Name	    Same	            Same
Parameter List	Must be different	Must be the same
Return Type	    Can be different	Must be the same (or covariant)
Access Modifier	No restrictions	    Cannot reduce access
Resolution      at compile-time	    Resolved at runtime
Static Methods	Can be overloaded	Cannot be overridden (hidden instead)
Final Methods	Can be overloaded	Cannot be overridden
Inheritance	    Not required	    Requires inheritance


### Type casting Rules

A b = (C) d;
Compile time checking 1 : C and d must have parent-child/child-parent/same type relationship.
Compile time checking 2: C should be child of A or same type.
Runtime checking 3: d should be child of C of same type.

Example:
Object obj = new String("John");
String s = (String)obj;
